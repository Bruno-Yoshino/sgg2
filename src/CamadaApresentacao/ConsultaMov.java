package CamadaApresentacao;

import CamadaLogica.ReadOnlyTableModel;
import CamadaNegocio.Folha;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import CamadaNegocio.Compra;
import CamadaNegocio.Orcamento;
import CamadaNegocio.Pedido;
import java.util.ArrayList;
import util.SystemControl;
import util.Validacao;

/**
 *
 * @author 吉野　廉
 * @author 羽根川　翼
 * @author モニカ
 * @author アナスタシア
 * @author 阿賀野
 * @author 矢矧
 * @author 磐手
 * @author イントレピッド
 * @author 弐条
 * @author 七草
 */
public class ConsultaMov extends javax.swing.JDialog {

    private int codigo;    
    private String[] vetOpcoes = new String[20];
    private int tl;
    private String tabela;
    private int posDefault;
    private final int x, y;
    boolean jtableEditavel;
    private ArrayList<Integer> listaSequence;
    private util.SystemControl sc = new SystemControl();

    public ConsultaMov(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        cbOpcao.requestFocus();
        dateInicio.setVisible(false);
        dateFim.setVisible(false);
        jla.setVisible(false);
        txtValor.setText("");
        x = txtValor.getX();
        y = txtValor.getY();
        listaSequence = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        cbOpcao = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLTexto = new javax.swing.JLabel();
        txtValor = new javax.swing.JTextField();
        dateInicio = new br.com.marciorl.beans.DateChooser();
        dateFim = new br.com.marciorl.beans.DateChooser();
        jla = new javax.swing.JLabel();
        btnLocalizar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cbOpcao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbOpcaoItemStateChanged(evt);
            }
        });
        cbOpcao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbOpcaoFocusLost(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Opção:");

        jLTexto.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLTexto.setText("Valor:");

        txtValor.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtValor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtValorFocusGained(evt);
            }
        });
        txtValor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtValorKeyPressed(evt);
            }
        });

        jla.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jla.setText("a");

        btnLocalizar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnLocalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Localizar 32.png"))); // NOI18N
        btnLocalizar.setText("Localizar");
        btnLocalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocalizarActionPerformed(evt);
            }
        });

        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Sair.png"))); // NOI18N
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        jCheckBox1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Exibir apenas Não Entregue");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbOpcao, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLTexto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtValor)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(dateInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jla)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBox1))
                .addGap(42, 42, 42)
                .addComponent(btnLocalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSair, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLocalizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(dateInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jla)
                                .addComponent(dateFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbOpcao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(jCheckBox1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLTexto)
                                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable4MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable4);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText("Help");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setText("Ajuda");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    public void verificaconsulta(boolean valor)
    {
        jtableEditavel = valor == true;
    }
    
    public int getCodigo()
    {
        return codigo;
    }
    
    public void configuraOpcoes(String[] vetOpcoes, int tl, int posDefault, String tabela, boolean flag)
    {
        this.tl = tl;
        this.vetOpcoes = vetOpcoes;
        this.posDefault = posDefault;
        this.tabela = tabela;
        this.setTitle("Localiza " + tabela);
        createModel();
        for (int i = 0; i < tl; i++)
        {
            cbOpcao.addItem(vetOpcoes[i]);
        }
        cbOpcao.setSelectedIndex(posDefault);
        if(tabela.equals("Pedido"))
        {
            jCheckBox1.setVisible(true);
        }
        else
        {
            jCheckBox1.setVisible(false);
        }
    }
    
    private void ControlaComboBox() //alterar os campos conforme a opcao selecionada
    {
        String nome = (String) cbOpcao.getSelectedItem();

        dateInicio.setVisible(false);
        dateFim.setVisible(false);
        jla.setVisible(false);
        if(nome.equals("Data"))
        {
            txtValor.setVisible(false);
            dateInicio.setVisible(true);
            dateInicio.setLocation(x+105,y-3);
            jLTexto.setText("Data");
        }
        else
        {
            if(nome.equals("Periodo"))
            {
                txtValor.setVisible(false);
                dateInicio.setVisible(true);
                dateInicio.setLocation(x+105,y+10);
                jla.setVisible(true);
                jla.setLocation(x+110,y-3);
                dateFim.setVisible(true);
                dateFim.setLocation(x+115,y-3);
                jLTexto.setText("Periodo");
            }
            else
            {
                if(nome.equals("Tudo"))
                {
                    txtValor.setVisible(false);
                    dateInicio.setVisible(false);
                    jla.setVisible(false);
                    dateFim.setVisible(false);
                    jLTexto.setText("Tudo");
                    txtValor.setVisible(false);
                    txtValor.setText("");
                }
                else
                {
                    dateInicio.setVisible(false);
                    dateFim.setVisible(false);
                    jla.setVisible(false);
                    txtValor.setVisible(true);
                    jLTexto.setText("Valor");
                }
            }
        }
    }
    
    private void createModel()
    {
        switch(tabela)
        {
            case "Compra": 
                Compra.configuraModel(jTable1);
                Compra.configuraModelItem(jTable3, "Produto");
                Compra.configuraModelItem(jTable4, "Tamanho/Descrição");
                break; 
            case "CCompra": 
                Compra.configuraModel(jTable1);
                Compra.configuraModel(jTable1);
                Compra.configuraModelItem(jTable3, "Produto");
                Compra.configuraModelItem(jTable4, "Tamanho/Descrição");
                break; 
            case "Orçamento": 
                Orcamento.configuraModel(jTable1);
                Orcamento.configuraModelOrcamentoS(jTable3);
                Orcamento.configuraModelOrcamentoSD(jTable4);
                break;
            case "Pedido": 
                Pedido.configuraModel(jTable1); 
                Pedido.configuraModelPedidoS(jTable3);
                Pedido.configuraModelPedidoSD(jTable4);
                break;
        }
    }
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2)
        {
            if (jTable1.getSelectedRow() >= 0)
            {
                if (jtableEditavel == true)
                {
                    codigo = Integer.parseInt(String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 0)));
                    this.dispose();
                }
                else
                {
                    codigo = Integer.parseInt(String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 0)));
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Você deve selecionar um registro", "Informação", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        else
        {
            if (jTable1.getSelectedRow() >= 0)
            {
                codigo = Integer.parseInt(String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 0)));
                sc.limparTabela(jTable3);
                sc.limparTabela(jTable4);
                switch(tabela)
                {
                    case "Compra": 
                        CompraFolha();
                        CompraProduto();
                        break;
                    case "CCompra": 
                        CompraFolha();
                        CompraProduto();
                        break;
                    case "Orçamento":
                        OrcamentoServico();
                        break;
                    case "Pedido":
                        PedidoServico();
                        break;
                }
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void cbOpcaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbOpcaoItemStateChanged
        ControlaComboBox();
    }//GEN-LAST:event_cbOpcaoItemStateChanged

    private void cbOpcaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbOpcaoFocusLost
        ControlaComboBox();
    }//GEN-LAST:event_cbOpcaoFocusLost

    private void txtValorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValorFocusGained
        txtValor.setText("");
    }//GEN-LAST:event_txtValorFocusGained

    private void txtValorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        btnLocalizarActionPerformed(null);
    }//GEN-LAST:event_txtValorKeyPressed

    private void btnLocalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocalizarActionPerformed
        sc.limparTabela(jTable1);
        switch(tabela)
        {
            case "Compra": Compra(); break; 
            case "CCompra": CCompra(); break; 
            case "Orçamento": Orcamento(); break;
            case "Pedido": Pedido(); break;
        }
    }//GEN-LAST:event_btnLocalizarActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        codigo = 0;
        dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        if (jTable3.getSelectedRow() >= 0)
        {
            
            switch(tabela)
            {
                case "Orçamento": 
                    sc.limparTabela(jTable4);
                    OrcamentoServicoDetalhe(); break;
                case "Pedido": 
                    sc.limparTabela(jTable4);
                    PedidoServicoDetalhe(); break;
            }
        }
    }//GEN-LAST:event_jTable3MouseClicked

    private void jTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable4MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       String caminho = "";
        switch(tabela)
        {
            case "Compra": caminho = "SGG/SGGOnlineHelp/conslc.html"; break; 
            case "CCompra": caminho = "SGG/SGGOnlineHelp/conslc.html"; break; 
            case "Orçamento": caminho = "SGG/SGGOnlineHelp/consorc.html"; break;
            case "Pedido": caminho = "SGG/SGGOnlineHelp/consped.html"; break;
        }
        if(!sc.help(caminho, "C:/"))
        {
            sc.help(caminho, "D:/");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void Compra() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            rs = Compra.ConsultaCompra(txtValor.getText(), tipo, dateInicio.getData(), dateFim.getData());
            while (rs.next())
            {
                model.addRow(new Object[]
                {//"Código", "Fornecedor", "Valor Total", "Data", "Funcionario"
                    rs.getInt(1), 
                    rs.getString(2),
                    rs.getDouble(3),
                    rs.getDate(4),
                    rs.getString(5)
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void CCompra() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Compra.configuraModelAE(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            rs = Compra.ConsultaCompraAE(txtValor.getText(), tipo, dateInicio.getData(), dateFim.getData());
            while (rs.next())
            {
                model.addRow(new Object[]
                {//"Código", "Valor Total", "Data", "Funcionario"
                    rs.getInt(1), 
                    rs.getDouble(2),
                    rs.getDate(3),
                    rs.getString(4)
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void Orcamento() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            rs = Orcamento.ConsultaOrcamento(txtValor.getText(), tipo, dateInicio.getData(), dateFim.getData());
            while (rs.next())
            {
                model.addRow(new Object[]
                {//"Número", "Cliente", "Data Pedido", "Data Vencimento", "Valor Total"
                 //o.orc_numero, c.cli_nome, o.orc_valortotal, o.orc_dataorc, o.orc_validade
                    rs.getInt(1), 
                    rs.getString(2),
                    rs.getDate(4),
                    rs.getDate(5),
                    rs.getDouble(3)
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void Pedido() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Validacao v = new Validacao();
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            rs = Pedido.ConsultaPedido(txtValor.getText(), tipo, dateInicio.getData(), dateFim.getData(), jCheckBox1.isSelected());
            while (rs.next())
            {
                model.addRow(new Object[]
                {//"Número", "Cliente", "Data Pedido", "Data Vencimento", "Valor Total"
                //p.pe_codigo, c.cli_nome, p.pe_valortotal, p.pe_datapedido, p.pe_dataentrega
                    rs.getInt(1), 
                    rs.getString(2),
                    rs.getDate(4),
                    //rs.getDate(5),
                    v.ValidarDataDuasData(rs.getDate(4), rs.getDate(5)) || v.ValidarDataDuasDataIgual(rs.getDate(4), rs.getDate(5))  ? rs.getDate(5) : "",
                    rs.getDouble(3)
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    //------------------------------------------------------------------ セカンド及びサードテーブル
    private void CompraProduto() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable3.getModel();
            rs = Compra.ConsultaCompraItem(codigo, 1); //1 == produto 2 == folha
            
            while (rs.next())
            {
                model.addRow(new Object[]
                {//texto, "Quantidade", "Preço Unitario", "Valor Total"
                    rs.getString(2), 
                    rs.getInt(3),
                    rs.getDouble(4),
                    rs.getInt(3) * rs.getDouble(4)
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void CompraFolha() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable4.getModel();
            rs = Compra.ConsultaCompraItem(codigo, 2); //1 == produto 2 == folha
            while (rs.next())
            {
                model.addRow(new Object[]
                {//texto, "Quantidade", "Preço Unitario", "Valor Total" cf.comp_codigo, f.fo_tamanho, f.fo_descricao, cf.compf_qtd, cf.compf_preco
                    rs.getString(2)+"/"+rs.getString(3),
                    rs.getInt(4),
                    rs.getDouble(5),
                    rs.getInt(4) * rs.getDouble(5)
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void OrcamentoServico() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            listaSequence.removeAll(listaSequence);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable3.getModel();
            rs = Orcamento.ConsultaOrcamentoServico(codigo); 
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getString(1),
                    rs.getDouble(2),
                    rs.getInt(3),
                    rs.getDouble(4),
                    rs.getDouble(5),
                    rs.getDouble(6),
                    rs.getDouble(7),
                    rs.getDouble(8),
                    rs.getDouble(9),
                    rs.getDouble(10),
                    rs.getDouble(2)*rs.getInt(3)+rs.getDouble(4)+rs.getDouble(5)+rs.getDouble(6)+rs.getDouble(7)+rs.getDouble(8)+rs.getDouble(9)-rs.getDouble(10),
                    rs.getString(11)
                });
                listaSequence.add(rs.getInt(12));
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void OrcamentoServicoDetalhe() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable4.getModel();
            rs = Orcamento.ConsultaOrcamentoServicoD(codigo, listaSequence.get(jTable3.getSelectedRow())); 
            
            while (rs.next())
            {
                
                model.addRow(new Object[]
                {//ds.ds_descricao, osd.osd_numeracaoini, osd.osd_numeracaofim, osd.osd_vias, osd.osd_outros, osd.os_sequence
                 //"Descrição", "Vias", "Numeração I.", "Numeração F", "Outros"   
                    rs.getString(1),
                    rs.getInt(4),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(5),
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void PedidoServico() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable3.getModel();
            rs = Pedido.ConsultaPedidoServico(codigo); 
            listaSequence.removeAll(listaSequence);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getString(1),
                    rs.getDouble(2),
                    rs.getInt(3),
                    rs.getDouble(4),
                    rs.getDouble(2)*rs.getInt(3)-rs.getDouble(4),
                    rs.getString(5)
                });
                listaSequence.add(rs.getInt(6));
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void PedidoServicoDetalhe() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable4.getModel();
            rs = Pedido.ConsultaPedidoServicoD(codigo, listaSequence.get(jTable3.getSelectedRow())); 
            
            while (rs.next())
            {
                
                model.addRow(new Object[]
                {
                    rs.getString(1),
                    rs.getInt(4),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(5),
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLocalizar;
    private javax.swing.JButton btnSair;
    private javax.swing.JComboBox<String> cbOpcao;
    private br.com.marciorl.beans.DateChooser dateFim;
    private br.com.marciorl.beans.DateChooser dateInicio;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLTexto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JLabel jla;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables
}
