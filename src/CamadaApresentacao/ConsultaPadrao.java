package CamadaApresentacao;

import CamadaLogica.ReadOnlyTableModel;
import CamadaNegocio.*;
import Controller.AtualizarCaixaController;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import javax.swing.JOptionPane;
import util.SystemControl;

/**
 *
 * @author 吉野　廉
 * @author 羽根川　翼
 * @author モニカ
 * @author 鈴  
 * @author 阿賀野
 * @author 矢矧
 * 
 * @author 弐条
 * @author 七草
 * @author 川波
 * @author 水川
 */
public class ConsultaPadrao extends javax.swing.JDialog {

    /**
     * Creates new form ConsultaPadrao
     * @param parent
     * @param modal
     */
    private int codigo;    
    private String[] vetOpcoes = new String[20];
    private SystemControl  sc = new SystemControl();
    private int tl;
    private String tabela;
    private int posDefault;
    private final int x, y;
    boolean jtableEditavel;
    
    public ConsultaPadrao(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        cbFlagCliente.setVisible(false);
        cbOpcao.requestFocus();
        dateInicio.setVisible(false);
        dateFim.setVisible(false);
        jla.setVisible(false);
        txtValor.setText("");
        x = txtValor.getX();
        y = txtValor.getY();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cbOpcao = new javax.swing.JComboBox<>();
        cbFlagCliente = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLTexto = new javax.swing.JLabel();
        txtValor = new javax.swing.JTextField();
        txtCPF = new br.com.ikeda.beans.jFormatTextCpf();
        txtCNPJ = new br.com.ikeda.beans.jFormatTextCnpj();
        dateInicio = new br.com.marciorl.beans.DateChooser();
        dateFim = new br.com.marciorl.beans.DateChooser();
        jla = new javax.swing.JLabel();
        btnLocalizar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cbOpcao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbOpcaoItemStateChanged(evt);
            }
        });
        cbOpcao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbOpcaoFocusLost(evt);
            }
        });

        cbFlagCliente.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cbFlagCliente.setText("Pessoa Fisica?");
        cbFlagCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cbFlagClienteKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Opção:");

        jLTexto.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLTexto.setText("Valor:");

        txtValor.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtValor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtValorFocusGained(evt);
            }
        });
        txtValor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtValorKeyPressed(evt);
            }
        });

        txtCPF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCPFKeyPressed(evt);
            }
        });

        txtCNPJ.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCNPJKeyPressed(evt);
            }
        });

        jla.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jla.setText("a");

        btnLocalizar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnLocalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Localizar 32.png"))); // NOI18N
        btnLocalizar.setText("Localizar");
        btnLocalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocalizarActionPerformed(evt);
            }
        });

        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Sair.png"))); // NOI18N
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbOpcao, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLTexto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtValor)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCNPJ, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dateInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jla)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbFlagCliente)
                .addGap(44, 44, 44)
                .addComponent(btnLocalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117)
                .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSair, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLocalizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbOpcao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(cbFlagCliente))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLTexto)
                            .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(dateInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jla)
                            .addComponent(dateFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCNPJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText("Help");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setText("Ajuda");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void verificaconsulta(boolean valor)
    {
        jtableEditavel = valor == true;
    }
    
    public int getCodigo()
    {
        return codigo;
    }
    
    public void configuraOpcoes(String[] vetOpcoes, int tl, int posDefault, String tabela, boolean flag)
    {
        this.tl = tl;
        this.vetOpcoes = vetOpcoes;
        this.posDefault = posDefault;
        this.tabela = tabela;
        this.setTitle("Localiza " + tabela);
        for (int i = 0; i < tl; i++)
        {
            cbOpcao.addItem(vetOpcoes[i]);
        }
        cbOpcao.setSelectedIndex(posDefault);
        if(tabela.equals("Cliente"))
            cbFlagCliente.setVisible(true);
    }
    
    private void ControlaComboBox() //alterar os campos conforme a opcao selecionada
    {
        String nome = (String) cbOpcao.getSelectedItem();

        dateInicio.setVisible(false);
        dateFim.setVisible(false);
        jla.setVisible(false);
        txtCNPJ.setVisible(false);
        txtCPF.setVisible(false);
        if(nome.contains("Data"))
        {
            txtValor.setVisible(false);
            dateInicio.setVisible(true);
            dateInicio.setLocation(x+105,y-3);
            jLTexto.setText("Data");
        }
        else
        {
            if(nome.contains("Periodo"))
            {
                txtValor.setVisible(false);
                dateInicio.setVisible(true);
                dateInicio.setLocation(x+105,y-3);
                jla.setVisible(true);
                jla.setLocation(x+110,y-3);
                dateFim.setVisible(true);
                dateFim.setLocation(x+115,y-3);
                jLTexto.setText("Periodo");

            }
            else
            {
                if(nome.equals("CPF"))
                {
                    txtCPF.setLocation(x+105,y-3);
                    txtCPF.setVisible(true);
                    cbFlagCliente.setVisible(false);
                    txtValor.setVisible(false);
                    jLTexto.setText("CPF");
                }
                else
                {
                    if(nome.equals("CNPJ"))
                    {
                        txtCNPJ.setLocation(x+105,y-3);
                        txtCNPJ.setVisible(true);
                        cbFlagCliente.setVisible(false);
                        txtValor.setVisible(false);
                        jLTexto.setText("CNPJ");
                    } 
                    else
                    {
                        if(tabela.equals("Cliente"))
                            cbFlagCliente.setVisible(true);
                        if(nome.equals("Caixa Atual"))
                        {
                            txtValor.setVisible(false);
                            jLTexto.setText("");
                        }
                        else
                        {
                            txtValor.setVisible(true);
                            jLTexto.setText("Valor");
                        }
                    }
                }
            }
        }
    }
    

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2)
        {
            if (jTable1.getSelectedRow() >= 0)
            {
                if (jtableEditavel == true)
                {
                    codigo = Integer.parseInt(String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 0)));
                    this.dispose();
                }
                else
                {
                    codigo = Integer.parseInt(String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 0)));
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Você deve selecionar um registro", "Informação", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void txtValorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValorFocusGained
        txtValor.setText("");
    }//GEN-LAST:event_txtValorFocusGained

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        codigo = 0;
        dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    private void cbOpcaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbOpcaoItemStateChanged
      ControlaComboBox();
    }//GEN-LAST:event_cbOpcaoItemStateChanged

    private void cbOpcaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbOpcaoFocusLost
      ControlaComboBox();
    }//GEN-LAST:event_cbOpcaoFocusLost

    private void btnLocalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocalizarActionPerformed
        switch(tabela)
        {
            case "Estado": Estado(); break;
            case "Cidade": Cidade(); break;
            case "Funcionario": Funcionario(); break;
            case "Folha": Folha(); break;
            case "TipoConta": TipoConta(); break;
            case "Cliente": Cliente(); break;
            case "Produto": Produto(); break;
            case "DetalheServico": DetalheServico(); break;
            case "Servico": Servico(); break;
            case "AServico": AServico(); break;
            case "Fornecedor": Fornecedor(); break;
            case "AProduto": AProduto(); break;
            case "AFolha": AFolha(); break;
            case "Cheque": Cheque(); break;
            case "CLancarDespesa": CLancarDespesa(); break;
            case "CCaixabanco": CCaixabanco(); break;
            case "CCaixaGeral": CCaixaGeral(); break;
            case "CEstornoCP": CEstornoCP(); break;
            case "CEstornoCR": CEstornoCR(); break;
            case "Ajuste Folha": AjusteFolha(); break;
            case "Ajuste Produto": AjusteProduto(); break;
            case "Caixa Retirada": CaixaRetirada(); break;
        }
    }//GEN-LAST:event_btnLocalizarActionPerformed

    private void txtValorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorKeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        btnLocalizarActionPerformed(null);
    }//GEN-LAST:event_txtValorKeyPressed

    private void txtCPFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCPFKeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        btnLocalizarActionPerformed(null);
    }//GEN-LAST:event_txtCPFKeyPressed

    private void txtCNPJKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCNPJKeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        btnLocalizarActionPerformed(null);
    }//GEN-LAST:event_txtCNPJKeyPressed

    private void cbFlagClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbFlagClienteKeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        btnLocalizarActionPerformed(null);
    }//GEN-LAST:event_cbFlagClienteKeyPressed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String caminho = "";
        switch(tabela)
        {
            case "Estado": caminho="SGG/SGGOnlineHelp/consestado.html"; break;
            case "Cidade": caminho="SGG/SGGOnlineHelp/conscidade.html"; break;
            case "Funcionario": caminho="SGG/SGGOnlineHelp/consfunc.html"; break;
            case "Folha": caminho="SGG/SGGOnlineHelp/consfolha.html"; break;
            case "TipoConta": caminho="SGG/SGGOnlineHelp/constc.html"; break;
            case "Cliente": caminho="SGG/SGGOnlineHelp/conscliente.html"; break;
            case "Produto": caminho="SGG/SGGOnlineHelp/consprod.html"; break;
            case "DetalheServico": caminho="SGG/SGGOnlineHelp/conssd.html"; break;
            case "Servico": caminho="SGG/SGGOnlineHelp/consserv.html"; break;
            case "AServico": caminho="SGG/SGGOnlineHelp/consserv.html"; break;
            case "Fornecedor": caminho="SGG/SGGOnlineHelp/consforn.html"; break;
            case "AProduto": caminho="SGG/SGGOnlineHelp/consprod.html"; break;
            case "AFolha": caminho="SGG/SGGOnlineHelp/consfolha.html"; break;
            case "Cheque": caminho="SGG/SGGOnlineHelp/conscheque.html"; break;
            
            case "CLancarDespesa": caminho="SGG/SGGOnlineHelp/consdespesa.html"; break;
            case "CCaixabanco": caminho="SGG/SGGOnlineHelp/conscaixabanco.html"; break;
            case "CCaixaGeral": caminho="SGG/SGGOnlineHelp/conscaixageral.html"; break;
            case "CEstornoCP": caminho="SGG/SGGOnlineHelp/consestornocp.html"; break;
            case "CEstornoCR": caminho="SGG/SGGOnlineHelp/consestornocr.html"; break;
            
            case "Ajuste Folha": caminho="SGG/SGGOnlineHelp/consaf.html"; break;
            case "Ajuste Produto": caminho="SGG/SGGOnlineHelp/consap.html"; break;
            case "Caixa Retirada": caminho="SGG/SGGOnlineHelp/conscr.html"; break;
        }
        if(!sc.help(caminho, "C:/"))
        {
            sc.help(caminho, "D:/");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    private void Estado() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Estado.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = Estado.buscarDados(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt("uf_codigo"), 
                    rs.getString("uf_sigla")
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void Cidade() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Cidade.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = Cidade.buscarDados(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt("cid_codigo"), 
                    rs.getString("cid_nome"), 
                    rs.getString("uf_sigla")
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void Folha() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Folha.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = Folha.buscarDados(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt("fo_codigo"), 
                    rs.getString("fo_tamanho"),
                    rs.getString("fo_descricao"),
                    rs.getDouble("fo_altura"),
                    rs.getString("fo_largura"),
                    rs.getBoolean("fo_status") ? "Ativo" : "Não Ativo"
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void AFolha() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Folha.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = Folha.buscarDados2(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt("fo_codigo"), 
                    rs.getString("fo_tamanho"),
                    rs.getString("fo_descricao"),
                    rs.getDouble("fo_altura"),
                    rs.getString("fo_largura"),
                    rs.getBoolean("fo_status") ? "Ativo" : "Não Ativo"
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void Produto() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Produto.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = Produto.buscarDados(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getString(2),
                    rs.getString(3).charAt(0) == 'i' ? "Interno" : "Externo",
                    rs.getBoolean(4) ? "Ativo" : "Não Ativo"
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void AProduto() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Produto.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = Produto.buscarDados2(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getString(2),
                    rs.getString(3).charAt(0) == 'i' ? "Interno" : "Externo",
                    rs.getBoolean(4) ? "Ativo" : "Não Ativo"
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void DetalheServico() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            DetalheServico.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = DetalheServico.buscarDados(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getString(2),
                    rs.getBoolean(3) ? "Ativo" : "Não Ativo"
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void Servico() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Servico.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = Servico.buscarDados(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getString(2),
                    rs.getBoolean(3) ? "Ativo" : "Não Ativo"
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void AServico() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Servico.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = Servico.buscarDados2(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getString(2),
                    rs.getBoolean(3) ? "Ativo" : "Não Ativo"
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void Funcionario() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Funcionario.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            if(tipo == 1)
            {
                rs = Funcionario.buscarDados(txtCPF.getText(), tipo);
            }
            else
                rs = Funcionario.buscarDados(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getString(3), 
                    rs.getString(7), 
                    rs.getString(13), 
                    rs.getString(14), 
                    LocalDate.parse(rs.getString(16)),
                    rs.getString(17) == null ? "" : LocalDate.parse(rs.getString(17))
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void Fornecedor() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Fornecedor.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = Fornecedor.buscarDados(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getString(3), 
                    rs.getString(4), 
                    rs.getString(5), 
                    rs.getString(6)
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void Cliente() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Cliente.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            switch(tipo)
            {
                case 1: rs = Cliente.buscarDados(txtValor.getText(), tipo, true); break;
                
                case 2: rs = Cliente.buscarDados(txtValor.getText(), tipo, false); break;
                
                default: rs = Cliente.buscarDados(txtValor.getText(), tipo, cbFlagCliente.isSelected()); 
            }
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getString(2), 
                    rs.getString(3),
                    rs.getString(4), 
                    rs.getString(5), 
                    rs.getString(6), 
                    rs.getString(7), 
                    rs.getString(8), 
                    rs.getBoolean(9) ? "Ativo" : "Não Ativo"
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void TipoConta() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            TipoConta.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = TipoConta.buscarDados(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt("tc_codigo"), 
                    rs.getString("tc_tipo")
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void Cheque() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Cheque.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = Cheque.buscarDados(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getString(3),
                    rs.getString(4),
                    rs.getDouble(5),
                    sc.DataOnly(rs.getDate(6)),
                    sc.DataOnly(rs.getDate(7))
                });
            }
        } 
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void CLancarDespesa() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            ContaPagar.configuraModelCLD(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            rs = ContaPagar.buscarDadosCLD(dateInicio.getData(), dateFim.getData(), tipo);
            sc.limparTabela(jTable1);
            while (rs.next())
            {
                //"Código", "Valor da Conta", "Data Vencimento", "Obs"
                //   1             5                  12           13
                //cp_codigo, comp_codigo, cp_data, cp_local, cp_valorc, cp_dtpago, cp_valorp, cp_nparcela, tc_codigo, func_codigo, caixa_codigo, cp_datavencimento, cp_obs
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getDouble(5),
                    sc.DataOnly(rs.getDate(12)),
                    rs.getString(13)
                });
            }
        }
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void CCaixabanco() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Caixa.configuraModelCaixaBanco(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = Caixa.buscarCaixaBanco(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getString(2),
                    new AtualizarCaixaController().saldoAtualizadoGeral(rs.getInt(1))
                });
            }
        }
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void CCaixaGeral() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            Caixa.configuraModelCaixaBanco(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = Caixa.buscarCaixaGeral(txtValor.getText(), tipo);
            while (rs.next())
            {
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getString(2) == null ? "Caixa Local" : rs.getString(2),
                    new AtualizarCaixaController().saldoAtualizadoGeral(rs.getInt(1))
                });
            }
        }
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void CEstornoCP() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            ContaPagar.configuraModelCEstornoCP(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = ContaPagar.buscarDadosCEstornoCP(dateInicio.getData(), dateFim.getData(), tipo);
            while (rs.next())
            {//cp_codigo, cp_valorc, cp_valorp, cp_datavencimento, cp_dtpago, cp_obs
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getDouble(2),
                    rs.getDouble(3),
                    sc.DataOnly(rs.getDate(4)),
                    sc.DataOnly(rs.getDate(5)),
                    rs.getString(6)
                });
            }
        }
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void CEstornoCR() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            ContaReceber.configuraModelCEstornoCR(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = ContaReceber.buscarDadosCEstornoCR(dateInicio.getData(), dateFim.getData(), tipo);
            while (rs.next())
            {//cp_codigo, cp_valorc, cp_valorp, cp_datavencimento, cp_dtpago, cp_obs
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getDouble(2),
                    rs.getDouble(3),
                    sc.DataOnly(rs.getDate(4)),
                    sc.DataOnly(rs.getDate(5)),
                    rs.getString(6)
                });
            }
        }
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void AjusteFolha() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            AjustarFolha.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = AjustarFolha.buscarDados(txtValor.getText(), tipo, dateInicio.getData(), dateFim.getData());
            while (rs.next())
            {
                model.addRow(new Object[]//adicionar true; retirar false
                {//af.af_codigo, s.serv_nome, af.af_qtd, af.af_data, af.af_flag, af.af_obs, func.func_nome
                //"Código",       "Servico", "Folha", "Qtd", "Data", "Tipo", "Obs", "Funcionario"
                    rs.getInt(1), 
                    rs.getString(2),
                    rs.getString(3)+"/"+rs.getString(4),
                    rs.getInt(5),
                    rs.getDate(6),
                    rs.getBoolean(7) ? "Adicionar" : "Retirar",
                    rs.getString(8),
                    rs.getString(9)
                });
            }
        }
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void AjusteProduto() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            AjustarProduto.configuraModel(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = AjustarProduto.buscarDados(txtValor.getText(), tipo, dateInicio.getData(), dateFim.getData());
            while (rs.next())
            {//"Código", "Servico", "Produto", "Qtd", "Data", "Tipo", "Obs", "Funcionario"
             //ap.ap_codigo, s.serv_nome, p.pro_nome, ap.ap_qtd, ap.ap_data, ap.ap_flag, ap.ap_obs, f.func_nome
                model.addRow(new Object[]//adicionar true; retirar false
                {
                    rs.getInt(1), 
                    rs.getString(2),
                    rs.getString(3),
                    rs.getInt(4),
                    rs.getDate(5),
                    rs.getBoolean(6) ? "Adicionar" : "Retirar",
                    rs.getString(7),
                    rs.getString(8)
                });
            }
        }
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }
    
    private void CaixaRetirada() 
    {
        try
        {
            ResultSet rs;
            int tipo = cbOpcao.getSelectedIndex();
            ContaPagar.configuraModelCaixaRetirada(jTable1);
            ReadOnlyTableModel model = (ReadOnlyTableModel) jTable1.getModel();
            sc.limparTabela(jTable1);
            rs = ContaPagar.buscaCaixaretirada(tipo, txtValor.getText(), dateInicio.getData(), dateFim.getData());
            while (rs.next())
            {////"Código", "Caixa", "Data Retirada", "Valor", "Funcionario", "Obs"
             //cp.cp_codigo, cp.caixa_codigo, cp.cp_data, cp.cp_valorc, f.func_nome, cp.cp_obs
                model.addRow(new Object[]
                {
                    rs.getInt(1), 
                    rs.getInt(2),
                    rs.getDate(3),
                    rs.getDouble(4),
                    rs.getString(5),
                    rs.getString(6)
                });
            }
        }
        catch (SQLException sqlEmp)
        {
            System.out.println("Erro: \n" + sqlEmp.toString());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLocalizar;
    private javax.swing.JButton btnSair;
    private javax.swing.JCheckBox cbFlagCliente;
    private javax.swing.JComboBox<String> cbOpcao;
    private br.com.marciorl.beans.DateChooser dateFim;
    private br.com.marciorl.beans.DateChooser dateInicio;
    private javax.swing.JLabel jLTexto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jla;
    private br.com.ikeda.beans.jFormatTextCnpj txtCNPJ;
    private br.com.ikeda.beans.jFormatTextCpf txtCPF;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables
}
